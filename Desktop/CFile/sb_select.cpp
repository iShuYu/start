// Code to do the selection
// This specific script is to cut **J\Psi(1S)**, cut conditions are in Cut() method
// Author : zhaomr
// Date   : June 4 2015
// Input  : argv[1]
// Output : argv[2]

#define DecayTree_cxx
//#define test
#include <iostream>
#include <fstream>
#include "DecayTree.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <vector>
#include <string>

using namespace std;

// DecayTree : class generated by ROOT MakeClass()
// Tree : extra variables add to DecayTree
class Tree : public DecayTree {
	public:
		Tree(TTree *tree=0) : DecayTree(tree) {}

		// pseudo-propertime 
		Double_t tz;
		Double_t tzError;
		// rapidity
		Double_t psi_Y;
		Double_t psi_ETA;
		Double_t mup_ETA;
		Double_t mum_ETA;

		TTree * Select();
		int Cut();
		void Loop();
};

int main(int argc, char* argv[]) {
	// data
	ifstream config(argv[1]);
	string inputfile, outputfile;
	config >> inputfile >> outputfile;
	TChain *input = new TChain("DecayTree", "");
	input->Add(inputfile.c_str());
	input->Show(0);

	Tree* tree = new Tree( (TTree*)input );

	// File !! location to save the selected data
	TFile* file = new TFile(outputfile.c_str(), "recreate");

	// Do the selection
	TTree* data_tree = tree->Select();

	// Save the new tree
	data_tree->Write();

	file->Close();
	return 0;
}

TTree* Tree::Select()
{
	// Create a new tree with all the variables definition but the values
	TTree *tree = fChain->CloneTree(0);

	// Add new variables definition 
	tree->Branch("tz", &tz, "tz/D");
	tree->Branch("tzError", &tzError, "tzError/D");
	tree->Branch("psi_Y", &psi_Y, "psi_Y/D");
	tree->Branch("psi_ETA", &psi_ETA, "psi_ETA/D");
	tree->Branch("mup_ETA", &mup_ETA, "mup_ETA/D");
	tree->Branch("mum_ETA", &mum_ETA, "mum_ETA/D");



	if (fChain == 0) return 0;

	Long64_t nentries = fChain->GetEntries();

	Long64_t nbytes = 0, nb = 0;

	// Loop for every entry to do the cut
	for (Long64_t jentry=0; jentry<nentries; jentry++)
	{
		Long64_t ientry = LoadTree(jentry);

		if (ientry < 0) break;
		if (jentry % 10000 == 0)
		cout << jentry<<"/"<<nentries <<endl;
		// Shutdown when real running
	//	#ifdef test 
	//	if (jentry > 100000) break;
	//	#endif
		
		nb = fChain->GetEntry(jentry);   nbytes += nb;

		// definition of tz and Y
		tz = (psi_ENDVERTEX_Z - psi_OWNPV_Z) / psi_PZ
			* 10.0 * 3096.9 / 2.9979;
		tzError = sqrt(psi_ENDVERTEX_ZERR * psi_ENDVERTEX_ZERR + psi_OWNPV_ZERR * psi_OWNPV_ZERR) / psi_PZ
			* 10.0 * 3096.9 / 2.9979;
		Double_t half_zeta_p = asin(mup_PT/mup_PE)/2;
		Double_t half_zeta_m = asin(mum_PT/mum_PE)/2;
		psi_Y = 0.5 * log((psi_PE + psi_PZ)/(psi_PE - psi_PZ));
		psi_ETA = 0.5 * log((psi_P + psi_PZ)/(psi_P - psi_PZ));
		mup_ETA = -log(tan(half_zeta_p));
		mum_ETA = -log(tan(half_zeta_m));

		if (Cut() < 0) continue;
//		if (nSPDHits<SPD_low||nSPDHits>=SPD_high) continue;
		tree->Fill();
	}

	// Only Save the most useful variables
	tree->SetBranchStatus("*", 0); 
	tree->SetBranchStatus("psi_P*", 1);
	tree->SetBranchStatus("psi_M", 1);
	tree->SetBranchStatus("psi_MM", 1);
	tree->SetBranchStatus("mup_P*", 1);
	tree->SetBranchStatus("mum_P*", 1);
	tree->SetBranchStatus("mup_PIDmu", 1);
	tree->SetBranchStatus("mum_PIDmu", 1);
	tree->SetBranchStatus("nCandidate", 1);
	tree->SetBranchStatus("totCandidates", 1);
	tree->SetBranchStatus("tz", 1);
	tree->SetBranchStatus("tzError", 1);
	tree->SetBranchStatus("psi_Y", 1);
	tree->SetBranchStatus("*_ETA", 1);
	tree->SetBranchStatus("n*", 1);
	tree->SetBranchStatus("*TIS", 1);
	tree->SetBranchStatus("*TOS", 1);

	return tree;
}

Int_t Tree::Cut()
{
	if (!( nPVs != 0 )) return -1;
//	if (!( nSPDHits >= SPD_low )) return -1;
//	if (!( nSPDHits < SPD_high )) return -1;
	if (!( BCType == 3 )) return -1;
	if (!( mup_PT > 650 )) return -1;
	if (!( mup_P > 3000 )) return -1;
	if (!( mum_PT > 650 )) return -1;
	if (!( mum_P > 3000 )) return -1;
	if (!( mup_PIDmu > 0 )) return -1;
	if (!( mum_PIDmu > 0 )) return -1;
//	cout << "no problem1" << endl;
	if (!( mup_isMuon == 1 )) return -1;
	if (!( mum_isMuon == 1 )) return -1;
	if (!( 2 < mup_ETA && mup_ETA < 4.9 )) return -1;
	if (!( 2 < mum_ETA && mum_ETA < 4.9 )) return -1;
//	cout << "no problem2" << endl;
	if (!( mup_TRACK_GhostProb < 0.3 )) return -1;
	if (!( mum_TRACK_GhostProb < 0.3 )) return -1;
	//if (!( 3096.9 - 120 <= psi_M && psi_M <= 3096.9 + 120 )) return -1;
//	cout << "no problem3" << endl;
	if (!( psi_ENDVERTEX_CHI2 < 8 )) return -1;
	if (!( -20 < tz && tz < 20 )) return -1;
	if (!( tzError < 0.3 )) return -1;
	//cout << "no problem3" << endl;
	if (!( psi_L0DiMuonDecision_TOS == 1)) return -1;
//	cout << "no problem3.5" << endl;
	if (!( psi_Hlt1DiMuonHighMassDecision_TOS == 1)) return -1;
//	cout << "no problem4" << endl;
	return 1;
}

